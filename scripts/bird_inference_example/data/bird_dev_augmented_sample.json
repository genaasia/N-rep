[{"idx": 0, "question_id": 0, "sample_type": "original", "db_id": "california_schools", "source_question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`", "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1"}, {"idx": 100, "question_id": 14, "sample_type": "first-person", "db_id": "california_schools", "source_question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.", "question": "I want the NCES school IDs of the top five schools with the most enrollment for ages 5-17, in descending order.", "evidence": "", "SQL": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5"}, {"idx": 200, "question_id": 28, "sample_type": "formal", "db_id": "california_schools", "source_question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.", "question": "Could you please list the names and DOC types of locally funded schools where the enrollment difference between K-12 and 15-17 exceeds the average difference?", "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`", "SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')"}, {"idx": 300, "question_id": 42, "sample_type": "fragments", "db_id": "california_schools", "source_question": "What is the type of education offered in the school who scored the highest average in Math?", "question": "school highest math score education type", "evidence": "", "SQL": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1"}, {"idx": 400, "question_id": 57, "sample_type": "imperative", "db_id": "california_schools", "source_question": "What is the phone number and extension number for the school that had the 333rd highest average writing score?", "question": "Find the phone and extension numbers for the school with the 333rd highest average writing score.", "evidence": "", "SQL": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1"}, {"idx": 500, "question_id": 71, "sample_type": "noun", "db_id": "california_schools", "source_question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?", "question": "District code for the school in Fresno without a magnet program.", "evidence": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.", "SQL": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0"}, {"idx": 600, "question_id": 85, "sample_type": "question", "db_id": "california_schools", "source_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.", "question": "What are the percentage of K-12 students eligible for free meals and the district code of the school where the first name of the administrator is Alusine?", "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%", "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'"}, {"idx": 700, "question_id": 100, "sample_type": "original", "db_id": "financial", "source_question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?", "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?", "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2", "SQL": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'"}, {"idx": 800, "question_id": 114, "sample_type": "first-person", "db_id": "financial", "source_question": "For the first client who opened his/her account in Prague, what is his/her account ID?", "question": "I want to know the account ID of the first client who opened an account in Prague.", "evidence": "A3 stands for region names", "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1"}, {"idx": 900, "question_id": 128, "sample_type": "formal", "db_id": "financial", "source_question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.", "question": "Could you please provide the list of the top nine districts ordered by the number of female account holders, from highest to lowest?", "evidence": "A2 refers to districts; Female refers to gender = 'F'", "SQL": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9"}, {"idx": 1000, "question_id": 142, "sample_type": "fragments", "db_id": "financial", "source_question": "Which accounts placed orders for household payment in Pisek?", "question": "accounts, household payment, orders, Pisek", "evidence": "k_symbol = 'SIPO' refers to household payment", "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'"}, {"idx": 1100, "question_id": 157, "sample_type": "imperative", "db_id": "financial", "source_question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?", "question": "Find the number of committed crimes in 1995 for the district of account ID 532.", "evidence": "A15 contains information about number of committed crimes in 1995", "SQL": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532"}, {"idx": 1200, "question_id": 171, "sample_type": "noun", "db_id": "financial", "source_question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?", "question": "Crime difference in 1996 between East Bohemia and North Bohemia.", "evidence": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16", "SQL": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district"}, {"idx": 1300, "question_id": 185, "sample_type": "question", "db_id": "financial", "source_question": "What proportion of customers who have accounts at the Prague branch are female?", "question": "What is the percentage of female customers with accounts at the Prague branch?", "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague", "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'"}, {"idx": 1400, "question_id": 200, "sample_type": "original", "db_id": "toxicology", "source_question": "Find the triple-bonded molecules which are carcinogenic.", "question": "Find the triple-bonded molecules which are carcinogenic.", "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'", "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'"}, {"idx": 1500, "question_id": 214, "sample_type": "first-person", "db_id": "toxicology", "source_question": "What type of label is not on molecules with atoms with tin?", "question": "I want to know which labels are not present on molecules with tin atoms.", "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'"}, {"idx": 1600, "question_id": 228, "sample_type": "formal", "db_id": "toxicology", "source_question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.", "question": "Could you please give me the percentage of hydrogen in molecule TR206, rounded to four decimal places?", "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'", "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'"}, {"idx": 1700, "question_id": 242, "sample_type": "fragments", "db_id": "toxicology", "source_question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.", "question": "carcinogenic molecules, atoms 21 to 25", "evidence": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic", "SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'"}, {"idx": 1800, "question_id": 257, "sample_type": "imperative", "db_id": "toxicology", "source_question": "List down atom id2 for atoms with element sulfur.", "question": "Find the distinct atom id2 for atoms where the element is sulfur.", "evidence": "element sulfur refers to element = 's'", "SQL": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'"}, {"idx": 1900, "question_id": 271, "sample_type": "noun", "db_id": "toxicology", "source_question": "Does bond id TR001_1_8 have both element of chlorine and carbon?", "question": "Presence of chlorine and carbon in bond ID TR001_1_8.", "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'", "SQL": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')"}, {"idx": 2000, "question_id": 285, "sample_type": "question", "db_id": "toxicology", "source_question": "Name chemical elements that form a bond TR001_10_11.", "question": "What chemical elements form the bond TR001_10_11?", "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)", "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'"}, {"idx": 2100, "question_id": 300, "sample_type": "original", "db_id": "toxicology", "source_question": "What atoms comprise TR186?", "question": "What atoms comprise TR186?", "evidence": "TR186 is a molecule id", "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'"}, {"idx": 2200, "question_id": 314, "sample_type": "first-person", "db_id": "toxicology", "source_question": "How many single bonds are there in the list?", "question": "I want to know the total number of single bonds in the list.", "evidence": "single bond refers to bond_type = '-';", "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'"}, {"idx": 2300, "question_id": 328, "sample_type": "formal", "db_id": "toxicology", "source_question": "List all the elements with double bond, consisted in molecule TR024.", "question": "Could you please list the elements with a double bond present in molecule TR024?", "evidence": "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium", "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='"}, {"idx": 2400, "question_id": 342, "sample_type": "fragments", "db_id": "card_games", "source_question": "List the card names with value that cost more converted mana for the face.", "question": "cards, highest face converted mana cost", "evidence": "more converted mana for the face refers to Max(faceConvertedManaCost);", "SQL": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1"}, {"idx": 2500, "question_id": 357, "sample_type": "imperative", "db_id": "card_games", "source_question": "What type of promotion is of card 'Duress'?", "question": "Find the type of promotion for the card named 'Duress'.", "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;", "SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL"}, {"idx": 2600, "question_id": 371, "sample_type": "noun", "db_id": "card_games", "source_question": "What is the percentage of cards whose language is French among the Story Spotlight cards?", "question": "Percentage of Story Spotlight cards in the French language.", "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100", "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1"}, {"idx": 2700, "question_id": 385, "sample_type": "question", "db_id": "card_games", "source_question": "Write down the ruling of Beacon of Immortality.", "question": "What is the ruling for the card named Beacon of Immortality?", "evidence": "Beacon of Immortality' is the name of card;", "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'"}, {"idx": 2800, "question_id": 400, "sample_type": "original", "db_id": "card_games", "source_question": "Lists the set code of all cards translated into Spanish.", "question": "Lists the set code of all cards translated into Spanish.", "evidence": "Spanish refer to language; set code refers to setCode", "SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'"}, {"idx": 2900, "question_id": 414, "sample_type": "first-person", "db_id": "card_games", "source_question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?", "question": "I want to know the language into which the 180-card set in the Ravnica block is translated.", "evidence": "set of 180 cards refers to baseSetSize = 180", "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180"}, {"idx": 3000, "question_id": 428, "sample_type": "formal", "db_id": "card_games", "source_question": "What is the name of set number 5 and its translation?", "question": "Could you please provide the name and translation for set number 5?", "evidence": "set number 5 refers to id = 5", "SQL": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation"}, {"idx": 3100, "question_id": 442, "sample_type": "fragments", "db_id": "card_games", "source_question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".", "question": "base set size, set code, blocks 'Masques', 'Mirage'", "evidence": "", "SQL": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')"}, {"idx": 3200, "question_id": 457, "sample_type": "imperative", "db_id": "card_games", "source_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".", "question": "List the websites where cards with the promotional type 'bundle' can be purchased.", "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls", "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'"}, {"idx": 3300, "question_id": 471, "sample_type": "noun", "db_id": "card_games", "source_question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "question": "Expansion type for the set 'Hauptset Zehnte Edition'.", "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type", "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'"}, {"idx": 3400, "question_id": 485, "sample_type": "question", "db_id": "card_games", "source_question": "When was the ruling for the card 'Reminisce' created?", "question": "What is the creation date for the ruling of the card 'Reminisce'?", "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date", "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'"}, {"idx": 3500, "question_id": 500, "sample_type": "original", "db_id": "card_games", "source_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.", "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.", "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'", "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL"}, {"idx": 3600, "question_id": 514, "sample_type": "first-person", "db_id": "card_games", "source_question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?", "question": "I want to know the top 10 cards with the highest uncoverted mana cost in duel format.", "evidence": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)", "SQL": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10"}, {"idx": 3700, "question_id": 528, "sample_type": "formal", "db_id": "card_games", "source_question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.", "question": "Could you please help me find the names of all cards in the Hour of Devastation set and the formats where they are legal?", "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format", "SQL": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )"}, {"idx": 3800, "question_id": 542, "sample_type": "fragments", "db_id": "codebase_community", "source_question": "What is the total number of comments of all the posts owned by csgillespie?", "question": "total comments posts csgillespie", "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)", "SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"idx": 3900, "question_id": 557, "sample_type": "imperative", "db_id": "codebase_community", "source_question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?", "question": "Calculate the percentage of posts with a score over 5 that are owned by elder users.", "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100", "SQL": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5"}, {"idx": 4000, "question_id": 571, "sample_type": "noun", "db_id": "codebase_community", "source_question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?", "question": "Ratio of posts to votes for user No.24.", "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))", "SQL": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24"}, {"idx": 4100, "question_id": 585, "sample_type": "question", "db_id": "codebase_community", "source_question": "How much is the total bounty amount of the post titled about 'data'", "question": "What is the total bounty amount for the posts that mention 'data' in their title?", "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)", "SQL": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'"}, {"idx": 4200, "question_id": 600, "sample_type": "original", "db_id": "codebase_community", "source_question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount", "SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217"}, {"idx": 4300, "question_id": 614, "sample_type": "first-person", "db_id": "codebase_community", "source_question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users", "question": "I need to know the percentage of users who have the \"Teacher\" badge.", "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100", "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'"}, {"idx": 4400, "question_id": 628, "sample_type": "formal", "db_id": "codebase_community", "source_question": "Which users have the highest number of views?", "question": "Could you please tell me which users have the greatest number of views?", "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);", "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"}, {"idx": 4500, "question_id": 642, "sample_type": "fragments", "db_id": "codebase_community", "source_question": "How many posts were created on 21st July, 2010?", "question": "posts count, 21st July 2010 creation date", "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';", "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'"}, {"idx": 4600, "question_id": 657, "sample_type": "imperative", "db_id": "codebase_community", "source_question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.", "question": "List display names and website URLs for the user receiving the highest bounty under vote type 8.", "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);", "SQL": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )"}, {"idx": 4700, "question_id": 671, "sample_type": "noun", "db_id": "codebase_community", "source_question": "What is the display name of the user who acquired the first Autobiographer badge?", "question": "Display name of the user who acquired the first Autobiographer badge.", "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1"}, {"idx": 4800, "question_id": 685, "sample_type": "question", "db_id": "codebase_community", "source_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.", "question": "What is the total view count and who is the last user to post 'Computer Game Datasets'?", "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';", "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'"}, {"idx": 4900, "question_id": 700, "sample_type": "original", "db_id": "codebase_community", "source_question": "Identify the number of posts that offer a bounty amount over 30.", "question": "Identify the number of posts that offer a bounty amount over 30.", "evidence": "bounty amount over 30 refers to BountyAmount > = 30;", "SQL": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30"}, {"idx": 5000, "question_id": 714, "sample_type": "first-person", "db_id": "codebase_community", "source_question": "List the comments commented by the user with a username of Harvey Motulsky.", "question": "I want the list of comments by the user whose username is Harvey Motulsky.", "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';", "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'"}, {"idx": 5100, "question_id": 728, "sample_type": "formal", "db_id": "superhero", "source_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.", "question": "Could you please rank the eye colors of superheroes from Marvel Comics by their popularity?", "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;", "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour"}, {"idx": 5200, "question_id": 742, "sample_type": "fragments", "db_id": "superhero", "source_question": "How many vampire superheroes are there?", "question": "vampire superheroes count", "evidence": "vampire superheroes refers to race = 'Vampire'", "SQL": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"}, {"idx": 5300, "question_id": 757, "sample_type": "imperative", "db_id": "superhero", "source_question": "Identify the race of the superhero who weighed 169 kg.", "question": "Find the race of the superhero who has a weight of 169 kg.", "evidence": "weighed 169 kg refers to weight_kg = 169", "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169"}, {"idx": 5400, "question_id": 771, "sample_type": "noun", "db_id": "superhero", "source_question": "List the name of superheroes with flight power.", "question": "Names of superheroes possessing the power of flight.", "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'"}, {"idx": 5500, "question_id": 785, "sample_type": "question", "db_id": "superhero", "source_question": "Describe the names of neutral alignment superheroes.", "question": "What are the names of superheroes who are neutrally aligned?", "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"idx": 5600, "question_id": 800, "sample_type": "original", "db_id": "superhero", "source_question": "Calculate the percentage of superheroes with blue eyes.", "question": "Calculate the percentage of superheroes with blue eyes.", "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id"}, {"idx": 5700, "question_id": 814, "sample_type": "first-person", "db_id": "superhero", "source_question": "List the skin colour of the superheroes with 100 attribute value.", "question": "I want to know the skin colours of superheroes whose attribute value is 100.", "evidence": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;", "SQL": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100"}, {"idx": 5800, "question_id": 828, "sample_type": "formal", "db_id": "superhero", "source_question": "Count the fastest superheroes.", "question": "Could you please provide the count of superheroes who have the highest speed rating?", "evidence": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';", "SQL": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100"}, {"idx": 5900, "question_id": 842, "sample_type": "fragments", "db_id": "superhero", "source_question": "Calculate the average height of all neutral superheroes.", "question": "average height, neutral superheroes", "evidence": "", "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"idx": 6000, "question_id": 857, "sample_type": "imperative", "db_id": "formula_1", "source_question": "Give the coordinate position for Abu Dhabi Grand Prix.", "question": "Find the latitude and longitude for the Abu Dhabi Grand Prix.", "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'", "SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'"}, {"idx": 6100, "question_id": 871, "sample_type": "noun", "db_id": "formula_1", "source_question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?", "question": "Nationality of the driver with Q2 time of 1:15 in race number 347.", "evidence": "race number refers to raceId;", "SQL": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'"}, {"idx": 6200, "question_id": 885, "sample_type": "question", "db_id": "formula_1", "source_question": "State the name and date of the last round of race in year 1999.", "question": "What are the name and date of the last race round in 1999?", "evidence": "the last round refers to max(round);", "SQL": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1"}, {"idx": 6300, "question_id": 900, "sample_type": "original", "db_id": "formula_1", "source_question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.", "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.", "evidence": "", "SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006"}, {"idx": 6400, "question_id": 914, "sample_type": "first-person", "db_id": "formula_1", "source_question": "How many drivers don't have a code?", "question": "I want to know how many drivers have no code.", "evidence": "don't have a code refers to code is null", "SQL": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers"}, {"idx": 6500, "question_id": 928, "sample_type": "formal", "db_id": "formula_1", "source_question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.", "question": "Could you please tell me the reference name of the driver who secured the first position in the 2007 Canadian Grand Prix?", "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';", "SQL": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007"}, {"idx": 6600, "question_id": 942, "sample_type": "fragments", "db_id": "formula_1", "source_question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?", "question": "average, fastest lap time, Lewis Hamilton, Formula 1 races, in seconds", "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'", "SQL": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'"}, {"idx": 6700, "question_id": 957, "sample_type": "imperative", "db_id": "formula_1", "source_question": "How many Italian drivers haven't finished the race?", "question": "Calculate the number of Italian drivers who did not finish the race.", "evidence": "haven't finished the race refers to time is null;", "SQL": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL"}, {"idx": 6800, "question_id": 971, "sample_type": "noun", "db_id": "formula_1", "source_question": "Please state the reference name of the oldest German driver.", "question": "Reference name of the oldest German driver.", "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.", "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1"}, {"idx": 6900, "question_id": 985, "sample_type": "question", "db_id": "formula_1", "source_question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.", "question": "Who had the slowest time in the 3rd lap at the French Grand Prix?", "evidence": "slowest time refers to Max(time);", "SQL": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1"}, {"idx": 7000, "question_id": 1000, "sample_type": "original", "db_id": "formula_1", "source_question": "Which racetrack hosted the most recent race? Indicate the full location.", "question": "Which racetrack hosted the most recent race? Indicate the full location.", "evidence": "full location refers to location+country; most recent race = MAX(date)\n\n", "SQL": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1"}, {"idx": 7100, "question_id": 1014, "sample_type": "first-person", "db_id": "formula_1", "source_question": "Please list the lap records for the circuits in Italy.", "question": "I want to know the lap records for circuits located in Italy.", "evidence": "lap record means the fastest time recorded which refers to time", "SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1"}, {"idx": 7200, "question_id": 1028, "sample_type": "formal", "db_id": "european_football_2", "source_question": "In Scotland Premier League, which away team won the most during the 2010 season?", "question": "Could you please identify the away team that claimed the most wins in the Scotland Premier League for the 2010 season?", "evidence": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));", "SQL": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"idx": 7300, "question_id": 1042, "sample_type": "fragments", "db_id": "european_football_2", "source_question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.", "question": "leagues, 2009/2010 season, home team, higher average goals than away", "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'", "SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0"}, {"idx": 7400, "question_id": 1057, "sample_type": "imperative", "db_id": "european_football_2", "source_question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.", "question": "Compute the average home team goal for Poland's 2010/2011 football season.", "evidence": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';", "SQL": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'"}, {"idx": 7500, "question_id": 1071, "sample_type": "noun", "db_id": "european_football_2", "source_question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.", "question": "Short name of the team with build up play attributes: speed 31, dribbling 53, passing 32.", "evidence": "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;", "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32"}, {"idx": 7600, "question_id": 1085, "sample_type": "question", "db_id": "european_football_2", "source_question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?", "question": "Who among Alexis, Ariel Borysiuk, and Arouna Kone is the best at crossing actions?", "evidence": "player who perform best in crossing actions refers to MAX(crossing);", "SQL": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1"}, {"idx": 7700, "question_id": 1100, "sample_type": "original", "db_id": "european_football_2", "source_question": "What is the highest overall rating received by Dorlan Pabon?", "question": "What is the highest overall rating received by Dorlan Pabon?", "evidence": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)", "SQL": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'"}, {"idx": 7800, "question_id": 1114, "sample_type": "first-person", "db_id": "european_football_2", "source_question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?", "question": "I want to know the average overall rating of Marko Arnautovic from February 22, 2007, to April 21, 2016.", "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'", "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'"}, {"idx": 7900, "question_id": 1128, "sample_type": "formal", "db_id": "european_football_2", "source_question": "Which country's players have the heaviest average weights?", "question": "Could you please tell me which country's players have the heaviest average weights?", "evidence": "heaviest average weights refers to MAX(AVG(weight))", "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1"}, {"idx": 8000, "question_id": 1142, "sample_type": "fragments", "db_id": "european_football_2", "source_question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?", "question": "Italian Serie A, 2015\u20132016, games count", "evidence": "In the 2015\u20132016 season refers to season = '2015/2016'", "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'"}, {"idx": 8100, "question_id": 1157, "sample_type": "imperative", "db_id": "thrombosis_prediction", "source_question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.", "question": "List the IDs, sex, and diseases for patients with a severe degree of thrombosis.", "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;", "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2"}, {"idx": 8200, "question_id": 1171, "sample_type": "noun", "db_id": "thrombosis_prediction", "source_question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?", "question": "Number of underage patients examined during the 1990 to 1993 period.", "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'", "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18"}, {"idx": 8300, "question_id": 1185, "sample_type": "question", "db_id": "thrombosis_prediction", "source_question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?", "question": "What is the decrease rate of total cholesterol for the patient born on 1959/2/18 from November to December in 1981?", "evidence": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))", "SQL": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'"}, {"idx": 8400, "question_id": 1200, "sample_type": "original", "db_id": "thrombosis_prediction", "source_question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?", "question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?", "evidence": "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100", "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'"}, {"idx": 8500, "question_id": 1214, "sample_type": "first-person", "db_id": "thrombosis_prediction", "source_question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.", "question": "I want the IDs, sex, and dates of birth of patients whose total protein levels are below the normal range.", "evidence": "total protein (TP) below the lower range of the normal index refers to TP < 6.0", "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0"}, {"idx": 8600, "question_id": 1228, "sample_type": "formal", "db_id": "thrombosis_prediction", "source_question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?", "question": "Could you please provide the list of patients along with their diagnoses who have a triglyceride index greater than 300?", "evidence": "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;", "SQL": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300"}, {"idx": 8700, "question_id": 1242, "sample_type": "fragments", "db_id": "thrombosis_prediction", "source_question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.", "question": "1984 lab tests, patients under 50, normal platelet level", "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ", "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'"}, {"idx": 8800, "question_id": 1257, "sample_type": "imperative", "db_id": "thrombosis_prediction", "source_question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?", "question": "Find out the number of patients under 70 with abnormal creatinine levels.", "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ", "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70"}, {"idx": 8900, "question_id": 1271, "sample_type": "noun", "db_id": "thrombosis_prediction", "source_question": "How many patients with a normal anti-SSA came to the hospital before 2000?", "question": "Count of patients with normal anti-SSA who came to the hospital before the year 2000.", "evidence": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones", "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'"}, {"idx": 9000, "question_id": 1285, "sample_type": "question", "db_id": "thrombosis_prediction", "source_question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.", "question": "When was the latest medical data recorded for a patient with a high lactate dehydrogenase level?", "evidence": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;", "SQL": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1"}, {"idx": 9100, "question_id": 1300, "sample_type": "original", "db_id": "thrombosis_prediction", "source_question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?", "question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?", "evidence": "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);", "SQL": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1"}, {"idx": 9200, "question_id": 1314, "sample_type": "first-person", "db_id": "student_club", "source_question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.", "question": "I want to know the full names of the students in the Student Club who are from the Art and Design Department.", "evidence": "full name refers to first_name, last_name;", "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'"}, {"idx": 9300, "question_id": 1328, "sample_type": "formal", "db_id": "student_club", "source_question": "List the last name of all the students who majored Law and Constitutional Studies. \n", "question": "Could you please provide the last names of the students who majored in Law and Constitutional Studies?", "evidence": "'Law and Constitutional Studies' is the major name", "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'"}, {"idx": 9400, "question_id": 1342, "sample_type": "fragments", "db_id": "student_club", "source_question": "What was the cost for the \"Posters\" on 2019/9/4?", "question": "Posters, cost, 2019/9/4", "evidence": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'", "SQL": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'"}, {"idx": 9500, "question_id": 1357, "sample_type": "imperative", "db_id": "student_club", "source_question": "State the date Connor Hilton paid his/her dues.", "question": "Find the date when Connor Hilton paid his dues.", "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';", "SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'"}, {"idx": 9600, "question_id": 1371, "sample_type": "noun", "db_id": "student_club", "source_question": "How many members attended the \"Women's Soccer\" event?", "question": "The attendance count of members for the 'Women's Soccer' event.", "evidence": "'Women's Soccer' is the event name;", "SQL": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'"}, {"idx": 9700, "question_id": 1385, "sample_type": "question", "db_id": "student_club", "source_question": "Which student was able to generate income more than $40?", "question": "Who are the students that earned over $40?", "evidence": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40", "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40"}, {"idx": 9800, "question_id": 1400, "sample_type": "original", "db_id": "student_club", "source_question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'", "question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'", "evidence": "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'", "SQL": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'"}, {"idx": 9900, "question_id": 1414, "sample_type": "first-person", "db_id": "student_club", "source_question": "State the name of major that Phillip Cullen has joined.", "question": "I want to know the name of the major that Phillip Cullen has joined.", "evidence": "name of major refers to major_name", "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'"}, {"idx": 10000, "question_id": 1428, "sample_type": "formal", "db_id": "student_club", "source_question": "List the city and state of members enrolled under electrical and computer engineering department.", "question": "Could you please tell me the city and state of those members who are part of the Electrical and Computer Engineering Department?", "evidence": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'", "SQL": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'"}, {"idx": 10100, "question_id": 1442, "sample_type": "fragments", "db_id": "student_club", "source_question": "What is the percentage of the events that went over budget?", "question": "events, percentage, over budget", "evidence": "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100", "SQL": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget"}, {"idx": 10200, "question_id": 1457, "sample_type": "imperative", "db_id": "student_club", "source_question": "Give the full name and contact number of members who had to spend more than average on each expense.", "question": "List the full names and contact numbers of members who spent more than the average amount on each expense.", "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)", "SQL": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )"}, {"idx": 10300, "question_id": 1471, "sample_type": "noun", "db_id": "debit_card_specializing", "source_question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?", "question": "Ratio of customers who pay in EUR to those who pay in CZK.", "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').", "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers"}, {"idx": 10400, "question_id": 1485, "sample_type": "question", "db_id": "debit_card_specializing", "source_question": "How much more was customer 7 consuming in April 2013 than customer 5?", "question": "What was the difference in consumption between customer 7 and customer 5 in April 2013?", "evidence": "April 2013 refers to 201304 in the yearmonth.date", "SQL": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'"}, {"idx": 10500, "question_id": 1500, "sample_type": "original", "db_id": "debit_card_specializing", "source_question": "Please list the product description of the products consumed in September, 2013.", "question": "Please list the product description of the products consumed in September, 2013.", "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.", "SQL": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'"}, {"idx": 10600, "question_id": 1514, "sample_type": "first-person", "db_id": "debit_card_specializing", "source_question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?", "question": "I need to know the type of currency the customer used at 16:25:00 on 2012/8/24.", "evidence": "'2012/8/24' can be represented by '2012-08-24'; ", "SQL": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'"}, {"idx": 10700, "question_id": 1528, "sample_type": "formal", "db_id": "debit_card_specializing", "source_question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?", "question": "Could you please provide the percentage of 'premium' against the total segment in Slovakia?", "evidence": "", "SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations"}]